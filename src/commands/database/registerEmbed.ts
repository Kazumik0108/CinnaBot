import { stripIndents } from 'common-tags';
import { Message, MessageEmbed, TextChannel } from 'discord.js';
import { Command, CommandoClient, CommandoMessage } from 'discord.js-commando';
import { Channel, Embed } from '../../entity';
import { handleConnection } from '../../handlers/database/handleConnection';
import { handleIDQuery } from '../../handlers/database/handleIDQuery';
import { CHANNEL_ID } from '../../lib/common/regex';
import { getGuildChannel } from '../../lib/utils/guild/getGuildChannel';

interface PromptArgs {
  search: TextChannel;
  title: string;
  target: TextChannel;
}

export default class registerEmbed extends Command {
  constructor(client: CommandoClient) {
    super(client, {
      name: 'registerembed',
      aliases: ['regembed', 'rege', 're'],
      memberName: 'registerembed',
      group: 'database',
      description: 'Register an embed message into the database for this guild.',
      details: stripIndents`
        Register an embed message into the database for this guild. The single embed message may be generated by any means, including the \`+makeembed\` command and Discohook, and may later be used as a preset embed message for the \`+embed\` command'
        
        Note that the embed message must be one of the last ten recent messages sent in the channel for this command to find the message.
        `,
      guildOnly: true,
      argsSingleQuotes: true,
      args: [
        {
          key: 'search',
          prompt: 'Mention the channel to search the embed message in.',
          type: 'string',
          validate: (mention: string, msg: Message) => {
            if (!CHANNEL_ID.test(mention)) return false;
            const id = (mention.match(CHANNEL_ID) as string[])[0];

            const channel = <TextChannel | null>getGuildChannel(id, msg);
            return channel != null ? true : false;
          },
          parse: (mention: string, msg: Message) => {
            const id = (mention.match(CHANNEL_ID) as string[])[0];
            const channel = <TextChannel>getGuildChannel(id, msg);
            return channel;
          },
        },
        {
          key: 'title',
          prompt: 'Specify the exact title of the embed message to match.',
          type: 'string',
        },
        {
          key: 'target',
          prompt: 'Mention the channel to register the embed message to.',
          type: 'string',
          validate: (mention: string, msg: Message) => {
            if (!CHANNEL_ID.test(mention)) return false;
            const id = (mention.match(CHANNEL_ID) as string[])[0];

            const channel = <TextChannel | null>getGuildChannel(id, msg);
            return channel != null ? true : false;
          },
          parse: (mention: string, msg: Message) => {
            const id = (mention.match(CHANNEL_ID) as string[])[0];
            const channel = <TextChannel>getGuildChannel(id, msg);
            return channel;
          },
        },
      ],
    });
  }

  async run(message: CommandoMessage, { search, title, target }: PromptArgs) {
    const conn = await handleConnection();

    const channel = (await handleIDQuery(target, conn)) as Channel | null | undefined;
    if (channel == null || channel == undefined) {
      message.reply(`${target} must first be registered to the database. Try using the command \`+registerchannel\`.`);
      return null;
    }

    const queryEmbed = await conn
      .createQueryBuilder()
      .select('e')
      .from(Embed, 'e')
      .where('e.channel = :channel', { channel: target.id })
      .andWhere('e.title = :title', { title: title })
      .getOne();

    if (queryEmbed != undefined) {
      message.reply(
        `an embed message in ${target} with the title \`${title}\` has already been registered into the database.`,
      );
      return null;
    }

    const msgs = (await search.messages.fetch({ limit: 10 }, false)).filter((m) => m.embeds.length > 0);
    if (msgs.size == 0) {
      message.reply(`there were no embed messages found in the last ten messages sent in ${search}.`);
      return null;
    }

    const msg = msgs.find((m) => m.embeds.some((e) => e.title == title));
    if (msg == undefined) {
      message.reply(
        `there were no embed messages with the title \`${title}\` in the last ten messages sent in ${search}.`,
      );
      return null;
    }

    const embed = <MessageEmbed>msg.embeds.find((e) => e.title == title);
    await conn.createQueryBuilder().insert().into(Embed).values({ title: title, embed: embed }).execute();

    const embedQuery = await conn
      .createQueryBuilder()
      .select()
      .from(Embed, 'e')
      .where('e.title = :title', { title: title })
      .execute();
    await conn.createQueryBuilder().relation(Embed, 'channel').of(embedQuery).set(channel);

    message.reply(`the embed message in ${target} with title \`${title}\` has been registered into the database.`);
    return null;
  }
}
